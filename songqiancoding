
//find first unique name

public static String uniqueString(String[] names) {
    if (names == null || names.length() == 0 ) return "";
    Map<String, Integer> counts = new HashMap<>(); 
    for (String str : names) { 
        counts.put(str, counts.containsKey(str) ? counts.get(str) + 1 : 1);
    } 
    for (Entry<String,Integer> entry : counts.entrySet()) { 
        if (entry.getValue() == 1) { 
            return entry.getKey(); 
        } 
    }
    return "";
}

//change date formats

public List<String> changeDateFormats(List<String> dates) {
    List<String> res = new ArrayList<>();
    if(dates == null || dates.length() == 0) return res;
    //YYYY/MM/DD,  DD/MM/YYYY, MM-DD-YYYY
    StringBuilder sb = new StringBuilder();
    for(String str : dates) {
        if(str.charAt(4) == '/') {
            for(int i = 0; i < str.length(); i++) {
                char c = str.charAt(i);
                if( c != '/') sb.append(c);
            }
            res.add(sb.toString());
        }
        if(str.charAt(2) == '/') {
            sb = new StringBuilder();
            for(int i = str.length() - 1; i >= 0; i--) {
                char c = str.charAt(i);
                if(c != '/') sb.append(c);
            }
            res.add(sb.toString());
        }
        if(str.charAt(2) == '-') {
            sb = new StringBuilder();
            for(int i = str.length() - 1; i > 5; i--) {
                char c = str.charAt(i);
                sb.append(c);
                
            }
            for(int i = 0; i < 5; i++ ) {
               char c = str.charAt(i);
               if(c != '-') {
                    sb.append(c);
               }
            }
            res.add(sb.toString());
        }
    
    }
    return res;

}

//nth rare element

public int nthRare (int[] elements, int n) {
    if(elements == null || elements.length == 0 || n == 0) return 0;
    Map<Integer, Integer> map = new HashMap<>() ;
    for(int i = 0; i < elements.length; i++){
        int curr = elements[i];
        if(!map.containsKey(curr)) {
            map.put(curr, 1);
        } else {
            map.put(curr, map.get(curr) + 1);
        }
    }
    
   PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<Map.Entry<Integer,Integer>>(
    map.size() - n,
    new Comparator<Map.Entry<Integer, Integer>>() {
        @Override
        public int compare(Entry<Integer, Integer> e1, Entry<Integer, Integer> e2) {
            return e2.getValue() - e1.getValue();
        }
    });
    
    for(Map.Entry<Integer, Integer> myEntry : map.entrySet()) {
        while (pq.size() <= map.size() - n) {
            if(pq.size() == n && pq.poll().getValue() < myEntry.getValue()) {
                pq.poll();
                pq.offer(myEntry);
            } 
            pq.offer(myEntry);
        }
    }
    
    return pq.poll().getValue();
}

//4
    public static Collection<Integer> getIdsByMessage(String xml, String message) throws Exception {
        Collection<Integer> list = new ArrayList<>();
    	String[] lines = xml.split("[\\r\\n]+");
    	for (int i = 0; i < lines.length; i++){
//    		String line = lines[i].split
    				if (lines[i].contains(message)){
    					String[] words = lines[i-1].split("\"") ;
    					int id = Integer.parseInt(words[1]);
    					list.add(id);
    				}
    	}
		return list;
    }
